#!/bin/sh

usage () {
    echo "build_html.sh [-lDFh?L:]"
    echo "    -l       Specify language"
    echo "    -L lisp  Lisp implementation to use"
    echo "    -D       Enable simple debugging of this script"
    echo "    -F       Force makeinfo to build the docs"
    echo "    -h       This help"
    echo "    -?       This help"
    echo "Build the html version of the manual, including both the single"
    echo "page version and the multi-page version.  This also builds all the"
    echo "category information."
    exit 1
}

lispimpl=@DEFAULTLISP@

while getopts "h?DFl:L:" arg
do
  case $arg in
      l) language=$OPTARG ;;
      L) lispimpl=$OPTARG ;;
      D) DEBUG=yes ;;
      F) FORCE=--force ;;
      h) usage ;;
      \?) usage ;;
  esac
done

pwd=`pwd`
if [ "x$language" = "x" ]
then
    language=en
    languagedir=@abs_srcdir@
    languagedestdir=$pwd
    texiinitfile=$pwd/@TEXI2HTML@
else
    languagedir=@abs_srcdir@/$language
    languagedestdir=$pwd
    if [ "$language" = "pt_BR" ]
    then language=pt
    fi
    texiinitfile=$pwd/../@TEXI2HTML@
fi

echo "$0: abs_srcdir=@abs_srcdir@, pwd=$pwd, language=$language, languagedir=$languagedir, texiinitfile=$texiinitfile"

includerfile=include-maxima.texi

# Extract all filenames that are included using @include commands in the order
# they are included
includedfiles=`@EGREP@ '^[[:space:]]*@include' $includerfile | @AWK@ '{ print $NF; }'`

# If output dir exists, remove it so we start clean
if [ -d tmp_html ]; then
    rm -rf tmp_html
fi
mkdir tmp_html
cp -r @abs_srcdir@/figures tmp_html
# "make distcheck" write-protects the source tree. We don't want our
# figures to inherit that attribute as we want to delete the temp folder
# again, later.
chmod -R u+w tmp_html

cat include-maxima.texi > tmp_html/include-maxima.texi

cd tmp_html

for f in $includedfiles
do
  # Find the absolute path of the current element of $includedfiles
  if [ -e $languagedir/$f ]
      then includedfile_absolute=$languagedir/$f
  else if [ -e @abs_srcdir@/$f ]
       then includedfile_absolute=@abs_srcdir@/$f
       else if [ -e ../../$f ]
       then includedfile_absolute=../../$f
	    else if [ -e ../$f ]
		 then includedfile_absolute=../$f
		 else
		     includedfile_absolute=`pwd`/../$f
		 fi
	    fi
       fi
  fi

  if [ -e $includedfile_absolute ]
  then
      if [ "X$DEBUG" = "Xyes" ]; then
	  echo "Taking the file $f from the path $includedfile_absolute"
      fi
  else
      echo Error: File $f cannot be found.
      exit -1
  fi
  
  filenamebase=`echo $includedfile_absolute | @SED@ -e 's/^.*\///;s/\.texi//'`
  @SED@ -e 's/^@deffnx*  *{[^}]*}  *\([^[:blank:]]*\).*/@anchor{Item: '$filenamebase'\/deffn\/\1}\
&/' \
        -e 's/^@defvrx*  *{[^}]*}  *\([^[:blank:]]*\).*/@anchor{Item: '$filenamebase'\/defvr\/\1}\
&/' \
        -e 's/^@node  *\([^,]*\).*/@anchor{Item: '$filenamebase'\/node\/\1}\
&/' $includedfile_absolute \
  | @AWK@ 'BEGIN { iftex = 0; } /^@iftex/ {iftex = 1;} {if (!iftex) {print;}} /^@end iftex/ {iftex = 0;}' \
  | @AWK@ '/@anchor/ {if (!(foo[$0])) {foo[$0] = 1; print;}} !/@anchor/' > $(basename $includedfile_absolute)
done 

catprogname=make-categories.lisp
for f in *.texi
do
  filenamebase=`echo $f | @SED@ -e 's/^.*\///;s/\.texi//'`
  echo "(setq *filenamebase* \"$filenamebase\")"
  echo "(setq items nil)"
  cat $f
done | @AWK@ '!/^@c / && !/^@c$/ && (/^@deffn/ || /^@defvr/ || /^@end deffn/ || /^@end defvr/ || /@category/ || /@node/ || /^.setq .filenamebase/ || /^.setq items nil/)' | @SED@ -f @abs_srcdir@/extract_categories1.sed | @AWK@ -f @abs_srcdir@/extract_categories1.awk > $catprogname 

if [ "$lispimpl" = "gcl" ]
    then lispprog="@GCL_NAME@"
         lispargs="-batch -load $catprogname"
elif [ "$lispimpl" = "clisp" ]
    then lispprog="@CLISP_NAME@"
         lispargs="$catprogname"
elif [ "$lispimpl" = "cmucl" ]
    then lispprog="@CMUCL_NAME@"
         lispargs="-load $catprogname -eval (quit)"
elif [ "$lispimpl" = "scl" ]
    then lispprog="@SCL_NAME@"
         lispargs="-load $catprogname -eval (quit)"
elif [ "$lispimpl" = "ecl" ]
    then lispprog="@ECL_NAME@"
         lispargs="--shell $catprogname"
elif [ "$lispimpl" = "ccl64" ]
    then lispprog="@CCL64_NAME@"
         lispargs="--load $catprogname --eval (quit)"
# NOT SURE ABOUT OPENMCL; SAME ARGS AS CCL/CCL64 OR DIFFERENT ??
elif [ "$lispimpl" = "ccl" -o "$lispimpl" = "openmcl" ]
    then lispprog="@OPENMCL_NAME@"
         lispargs="--load $catprogname --eval (quit)"
elif [ "$lispimpl" = "sbcl" ]
    then lispprog="@SBCL_NAME@"
         lispargs="--script $catprogname"
elif [ "$lispimpl" = "abcl" ]
    then lispprog="@JRE@"
         lispargs="-jar @ABCL_JAR@ --load $catprogname --eval (quit)"
elif [ "$lispimpl" = "acl" ]
    then lispprog="@ACL_NAME@"
         lispargs="-L $catprogname --kill"
else
    echo "$0: DEFAULTLISP = $lispimpl not recognized, assume '$lispimpl $catprogname' is acceptable."
    lispprog="$lispimpl"
    lispargs="$catprogname"
fi

echo "$0: execute category program: \"$lispprog\" $lispargs"
"$lispprog" $lispargs

# Some languages don't have documentation categories so we don't want
# to add the extra section if it's going to be empty.  So for any
# language that has categories, maxima.texi MUST have the line "@c
# Include documentation categories" to indicate that we will add the
# section to the manual.
if @GREP@ -q '^@c Include documentation categories' $languagedir/maxima.texi; then
    # Add documentation categories.  First, replace @bye with @ifhtml
    @SED@ -e 's/^@bye/@ifhtml/' $languagedir/maxima.texi > maxima.texi

    # Add all Category-*.texi files to maxima.texi.
    # If there aren't any the file named "Category-*.texi" cannot be found
    # and therefore will be excluded by the 'if'.
    ( for f in Category-*.texi; do
	  if [ -e "$f" ]; then
	      echo '@include' $f
	  fi
      done
      # Done with categories files, so close the @ifhtml and mark the end
      # of the file with @bye that was removed above.
      echo @end ifhtml
      echo @bye
    ) >> maxima.texi
else
    cat $languagedir/maxima.texi > maxima.texi
fi
   
if [ "X$DEBUG" = "Xyes" ]; then
    set -x
fi

# If NEED_MATHJAX is set by configure, then the version of makeinfo is
# too old to support the customization variable HTML_MATH.  If so,
# don't try to set the variable on the command line.  If NEED_MATHJAX
# is not set, set the HTML_MATH variable so that makeinfo will include
# mathjax for us.
if [ -z "@NEED_MATHJAX@" ]; then
    SET_HTML_MATH="--set-customization-variable HTML_MATH=mathjax"
fi

# Currently the Russian documentation has errors in it, so we're just
# going to force makeinfo to build anyway.
#
# DO NOT do this for the English documentation! Fix the English
# documentation so that makeinfo runs without errors!
if [ "x$language" = "xru" ]; then
    FORCE=--force
fi    

# --no-node-files so we don't have thousands of little html files
# There should be no errors in the texi files so don't use "--force -e
# 10000" to force building the docs.  We want to fail building if
# there are errors now.
TEXIOPT="$FORCE --html -c OUTPUT_ENCODING_NAME=UTF-8 -e 10000 --document-lang=$language -I . -I $languagedir -I ../.. --css-include=@abs_srcdir@/manual.css -I @abs_srcdir@/figures --init-file $texiinitfile ${SET_HTML_MATH}"
# Show the commands. 
set -x
@MAKEINFO@ $FORCE --split=chapter --no-node-files --output="$languagedestdir" $TEXIOPT maxima.texi
rc=$?
if [ $rc -ne 0 ]; then
    echo Failed to build multi-page html docs
    exit $rc
fi

@MAKEINFO@ $FORCE --no-split --output="$languagedestdir/maxima_singlepage.html" $TEXIOPT maxima.texi
rc=$?
if [ $rc -ne 0 ]; then
    echo Failed to build single page html doc
    exit $rc
fi
set +x

if [ "X$DEBUG" = "Xyes" ]; then
    set -x
fi

cd ..

# Copy maxima_0.html to index.html manually when using older makeinfo
MAKEINFO_VERSION=`@MAKEINFO@ --version | head -n1 | sed 's/.* \([0-9][0-9]*\.[0-9][0-9]*\).*/\1/'`
MIVERSION_MAJOR=`echo "$MAKEINFO_VERSION" | cut -d. -f1`
MIVERSION_MINOR=`echo "$MAKEINFO_VERSION" | cut -d. -f2`

if [ "$MIVERSION_MAJOR" -lt 6 ] || { [ "$MIVERSION_MAJOR" -eq 6 ] && [ "$MIVERSION_MINOR" -lt 8 ]; }; then
        echo "makeinfo version less than 6.8 detected. Copying maxima_0.html to index.html."; \
        if [ -f maxima_0.html ] && [ ! -f index.html ]; then \
                cp maxima_0.html index.html; \
        fi; \
else \
        echo "makeinfo version 6.8 or higher detected. index.html should be generated automatically."; \
fi

if [ "X$DEBUG" != "Xyes" ]; then
    rm -r -f tmp_html
fi
